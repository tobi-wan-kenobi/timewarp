#!/usr/bin/env python

import os
import sys
import argparse
import importlib

# to make import work with relative paths when directly
# checked out from git
sys.path.insert(0, "{}/..".format(os.path.dirname(os.path.realpath(__file__))))

import timewarp.util
import timewarp.adapter

def log_event(event):
    print(event)

# timewarp ec2 checkpoint create <instance id>
# timewarp ec2 checkpoint list <instance id>
# timewarp ec2 checkpoint restore <instance id> <checkpoint id>
# timewarp ec2 checkpoint delete <instance id> <checkpoint id>
def main():
    parser = argparse.ArgumentParser(description="manage snapshots")

    parser.add_argument("--dry-run", "-d", action="store_true", help="run in dry-run mode")
    parser.add_argument("--verbose", "-v", action="store_true", help="run in verbose mode")

    sub_parsers = parser.add_subparsers(dest="adapter")
    for adapter in ["ec2"]:
        sub_parser = sub_parsers.add_parser(adapter, help="manage {} snapshots".format(adapter.upper()))
        cmd_parser = sub_parser.add_subparsers(dest="command")
        for cmd in ["create", "list", "restore", "delete"]:
            p = cmd_parser.add_parser(cmd)
            p.add_argument("vm_id", metavar="<vm identifier>", help="virtual machine identifier (e.g. instance ID for EC2)")
            if cmd in ["restore"]:
                p.add_argument("--force", "-f", action="store_true", help="shut down virtual machine, if it is currently running")
                p.add_argument("--current", "-c", action="store_true", help="create a snapshot of the current status before reverting")
                p.add_argument("checkpoint_id", metavar="<checkpoint id>", help="checkpoint identifier")
            if cmd in ["delete"]:
                p.add_argument("checkpoint_id", metavar="<checkpoint id>", help="list of checkpoint identifiers", nargs="+")
            if cmd in ["create"]:
                p.add_argument("--name", "-n", metavar="<checkpoint name>", help="(optional) provide a descriptive name for the checkpoint")

    args = parser.parse_args()

    if args.dry_run or args.verbose:
        timewarp.util.register(log_event)
    timewarp.adapter.dryrun = args.dry_run

    module = importlib.import_module("timewarp.{}".format(args.adapter))
    obj = getattr(module, "VirtualMachine")(args.vm_id)

    if args.command == "create":
        obj.create_checkpoint(args.name)
    if args.command == "list":
        checkpoints = obj.list_checkpoints()
        for c in checkpoints:
            print("[{}] {} {}".format(c.time, c.id, c.name))
    if args.command == "restore":
        if args.current:
            obj.create_checkpoint("timewarp restore checkpoint")
        obj.restore_checkpoint(args.checkpoint_id, force=args.force)
    if args.command == "delete":
        for checkpoint_id in args.checkpoint_id:
            obj.delete_checkpoint(checkpoint_id)

if __name__ == "__main__":
    main()

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
